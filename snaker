#!/usr/bin/env ruby

require 'io/console'

UP    = '[A'
RIGHT = '[C'
DOWN  = '[B'
LEFT  = '[D'

# Tentative values for Windows
# UP    = "#{224.chr}H"
# RIGHT = "#{224.chr}M"
# DOWN  = "#{224.chr}P"
# LEFT  = "#{224.chr}K"

INNER_HEIGHT = 15
INNER_LENGTH = 10

ITERATION_PERIOD = 0.2

def print_playfield
  print '+', '=' * (INNER_LENGTH), '+', "\n"

  INNER_HEIGHT.times { print '|', ' ' * INNER_LENGTH, '|', "\n" }

  print '+', '=' * (INNER_LENGTH), '+'
end

def print_snake(snake)
  snake.each do |snake_bit|
    $stdout.cursor = snake_bit.values

    puts case snake_bit
         when snake.first then 'o'
         when snake.last then 'X'
         else '#'
         end

    $stdout.cursor = [0, 0]
  end
end

def update_snake(snake, current_direction, key = current_direction, target)
  key = current_direction if (current_direction == UP && key == DOWN) ||
                             (current_direction == RIGHT && key == LEFT) ||
                             (current_direction == DOWN && key == UP) ||
                             (current_direction == LEFT && key == RIGHT) ||
                             (key != UP && key != RIGHT && key != DOWN && key != LEFT)

  snake << case key
           when UP
             {vertical_position: snake.last[:vertical_position] - 1,
              horizontal_position: snake.last[:horizontal_position]}
           when RIGHT
             {vertical_position: snake.last[:vertical_position],
              horizontal_position: snake.last[:horizontal_position] + 1}
           when DOWN
             {vertical_position: snake.last[:vertical_position] + 1,
              horizontal_position: snake.last[:horizontal_position]}
           when LEFT
             {vertical_position: snake.last[:vertical_position],
              horizontal_position: snake.last[:horizontal_position] - 1}
           else puts 'a problem occurred when trying to detect the pressed key'
           end

  snake.shift unless got_target?(snake, target)
end

def got_target?(snake, target)
  snake.last == target
end

def colision?(snake)
  snake_last = snake.last
  [1, INNER_HEIGHT + 2].include?(snake_last[:vertical_position]) ||
  [0, INNER_LENGTH + 1].include?(snake_last[:horizontal_position]) ||
  snake[0..-2].include?(snake_last)
end

def print_target(target)
  $stdout.cursor = target.values

  puts '@'
end

def update_target(snake)
  loop do
    new_target = {vertical_position: rand(2..INNER_HEIGHT + 1), horizontal_position: rand(1..INNER_LENGTH)}

    return new_target unless snake.include?(new_target)
  end
end

def key_valid?(current_direction, key)
  (current_direction != UP && key == DOWN) ||
  (current_direction != RIGHT && key == LEFT) ||
  (current_direction != DOWN && key == UP) ||
  (current_direction != LEFT && key == RIGHT)
end

loop do
  $stdout.echo = false

  current_direction = RIGHT

  snake = [{vertical_position: 2, horizontal_position: 1},
           {vertical_position: 2, horizontal_position: 2},
           {vertical_position: 2, horizontal_position: 3}]

  target = update_target(snake)

  playtime = 0

  score = 0

  loop do
    $stdout.clear_screen

    print "playtime: #{playtime.to_i} s", "\t", "score: #{score}", "\n"

    print_playfield

    $stdout.cursor = [0, 0]

    print_snake(snake)

    $stdout.cursor = [0, 0]

    print_target(target)

    $stdout.cursor = [INNER_HEIGHT + 4, 0]

    start_time = Time.now

    $stdin.getch(min: 0, time: ITERATION_PERIOD, intr: true)
    key = $stdin.raw(min: 0, time: 0.000001, intr: true) { gets }

    current_direction = key if key_valid?(current_direction, key)

    loop { break if Time.now - start_time > ITERATION_PERIOD }

    update_snake(snake, current_direction, key, target)

    if got_target?(snake, target)
      target = update_target(snake)

      score += 1

      $stdout.beep
    end

    if colision?(snake)
      $stdout.beep
      sleep(0.1)
      $stdout.beep

      break
    end

    playtime += ITERATION_PERIOD
  end

  $stdout.echo = true

  print 'play again? [y/n] '
  break if gets.chomp == 'n'
end

puts 'Thank you for playing!'

sleep (1)
